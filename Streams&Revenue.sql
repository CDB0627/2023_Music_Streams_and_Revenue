# Query to view data in table
SELECT *
From StreamsandRevenue;

# View total revenue generated by each artist
SELECT Song_Title, Artist,SUM(Revenue) AS REVENUE_GENERATED
FROM StreamsandRevenue
GROUP BY Song_Title, Artist;

# Revenue CTE created & we'll view the rank of the artists based on revenue generated
WITH Revenue_CTE AS (
SELECT Song_Title, Artist, SUM(Revenue) AS REVENUE_GENERATED, ROW_NUMBER() OVER(ORDER BY SUM(Revenue) DESC) AS Artist_Rank
FROM StreamsandRevenue
GROUP BY Song_Title, Artist)
SELECT Song_title, Artist, REVENUE_GENERATED,  Artist_Rank
FROM Revenue_CTE;

# View total streams generated by each platform
SELECT Platform , SUM(Stream_Count) AS Platform_Streams
FROM StreamsandRevenue
GROUP BY Platform;

# Average revenue per platform per state
SELECT State, Platform, ROUND(AVG(Revenue), 2) As Avg_Revenue
From StreamsandRevenue
GROUP BY State, Platform; 
	
# Streams CTE created & we'll rank the platforms based upon who had the most streams
WITH Streams_CTE AS (
SELECT Platform , SUM(Stream_Count) AS Platform_Streams, ROW_NUMBER() OVER(ORDER BY SUM(Stream_Count) DESC) AS Platform_Rank
FROM StreamsandRevenue
GROUP BY Platform)
SELECT Platform , Platform_Streams, Platform_Rank
FROM Streams_CTE
GROUP BY Platform;

# Create views of CTEs for each demographic that'll show stream counts on each platform & we'll rank which platform is being utilized the most.
CREATE VIEW YOUNGADULTDEMOGRAPICSTREAMS AS
WITH YATempStreamCounts AS (
SELECT Demographic, Platform, SUM(Stream_Count) AS Total_Streams, ROW_NUMBER() OVER(ORDER BY SUM(Stream_Count) DESC) AS Stream_Rank
FROM StreamsandRevenue
WHERE Demographic = '18-24'
GROUP BY Demographic,Platform)
SELECT * FROM YATempStreamCounts;

CREATE VIEW ADULTDEMOGRAPICSTREAMS AS
WITH ATempStreamCounts AS (
SELECT Demographic, Platform, SUM(Stream_Count) AS Total_Streams, ROW_NUMBER() OVER(ORDER BY SUM(Stream_Count) DESC) AS Stream_Rank
FROM StreamsandRevenue
WHERE Demographic = '25-34'
GROUP BY Demographic,Platform)
SELECT * FROM ATempStreamCounts;

CREATE VIEW MIDDLEADULTDEMOGRAPICSTREAMS AS
WITH MATempStreamCounts AS (
SELECT Demographic, Platform, SUM(Stream_Count) AS Total_Streams, ROW_NUMBER() OVER(ORDER BY SUM(Stream_Count) DESC) AS Stream_Rank
FROM StreamsandRevenue
WHERE Demographic = '35-44'
GROUP BY Demographic,Platform)
SELECT * FROM MATempStreamCounts;

CREATE VIEW MOREMIDDLEADULTDEMOGRAPICSTREAMS AS
WITH MMATempStreamCounts AS (
SELECT Demographic, Platform, SUM(Stream_Count) AS Total_Streams, ROW_NUMBER() OVER(ORDER BY SUM(Stream_Count) DESC) AS Stream_Rank
FROM StreamsandRevenue
WHERE Demographic = '45-54'
GROUP BY Demographic,Platform)
SELECT * FROM MMATempStreamCounts;

CREATE VIEW ELDERADULTDEMOGRAPICSTREAMS AS
WITH EATempStreamCounts AS (
SELECT Demographic, Platform, SUM(Stream_Count) AS Total_Streams, ROW_NUMBER() OVER(ORDER BY SUM(Stream_Count) DESC) AS Stream_Rank
FROM StreamsandRevenue
WHERE Demographic = '55+'
GROUP BY Demographic,Platform)
SELECT * FROM EATempStreamCounts;

#I'll write join statements to query off of the views created.
SELECT *
FROM YOUNGADULTDEMOGRAPICSTREAMS AS YA
JOIN ADULTDEMOGRAPICSTREAMS AS AA
ON YA.Platform = AA.Platform
JOIN MIDDLEADULTDEMOGRAPICSTREAMS AS MA
ON AA.Platform = MA.Platform
JOIN MOREMIDDLEADULTDEMOGRAPICSTREAMS AS MMA
ON MA.Platform = MMA.Platform
JOIN ELDERADULTDEMOGRAPICSTREAMS AS EA
ON MMA.Platform = EA.platform;

# Another way to do this would be to use a Union clause but it's best if the tables have identical columns - otherwise you could potentially have null values & unorganized data. I'll show an example of a union.
SELECT Demographic, Platform, Total_Streams
FROM YOUNGADULTDEMOGRAPICSTREAMS
UNION
SELECT Demographic, Platform, Total_Streams
FROM ELDERADULTDEMOGRAPICSTREAMS;

# I'll create a stored procedure to see which demographic is generating the most money for each platform 
DELIMITER //

DROP PROCEDURE IF EXISTS MostRevenuePerDemographicPerPlatform;
CREATE PROCEDURE MostRevenuePerDemographicPerPlatform ()
BEGIN
DROP TABLE IF EXISTS TopDemographicsPerPlatform;
CREATE TEMPORARY TABLE IF NOT EXISTS TopDemographicsPerPlatform (
Platform varchar(250), Demographic varchar(250), Total_Revenue decimal(30,2) 
);
INSERT INTO TopDemographicsPerPlatform (Platform, Demographic, Total_Revenue)
SELECT Platform, Demographic, SUM(Revenue) AS Total_Revenue
FROM StreamsandRevenue
GROUP BY Platform, Demographic
ORDER BY Total_Revenue DESC; 

SELECT * FROM TopDemographicsPerPlatform;

END //

DELIMITER ;

CALL MostRevenuePerDemographicPerPlatform();


# I'll do another stored procedure to see the top 5 grossing songs
DELIMITER //

DROP PROCEDURE IF EXISTS Top5GrossingSongs;
CREATE PROCEDURE Top5GrossingSongs ()
BEGIN
DROP TABLE IF EXISTS TopGrossingSongs;
CREATE TEMPORARY TABLE IF NOT EXISTS TopGrossingSongs (
Song_Title varchar(250), Artist varchar(250), Total_Revenue decimal(30,2) 
);
INSERT INTO TopGrossingSongs (Song_Title, Artist, Total_Revenue)
SELECT Song_Title, Artist, SUM(Revenue) AS Total_Revenue
FROM StreamsandRevenue
GROUP BY Song_Title, Artist
ORDER BY Total_Revenue DESC
LIMIT 5; 

SELECT * FROM TopGrossingSongs;

END //

DELIMITER ;

CALL Top5GrossingSongs();

# Least grossing song stored procedure
DELIMITER //

DROP PROCEDURE IF EXISTS Bottom5GrossingSongs;
CREATE PROCEDURE Bottom5GrossingSongs ()
BEGIN
DROP TABLE IF EXISTS LeastGrossingSongs;
CREATE TEMPORARY TABLE IF NOT EXISTS LeastGrossingSongs (
Song_Title varchar(250), Artist varchar(250), Total_Revenue decimal(30,2) 
);
INSERT INTO LeastGrossingSongs (Song_Title, Artist, Total_Revenue)
SELECT Song_Title, Artist, SUM(Revenue) AS Total_Revenue
FROM StreamsandRevenue
GROUP BY Song_Title, Artist
ORDER BY Total_Revenue ASC
LIMIT 5; 

SELECT * FROM LeastGrossingSongs;

END //

DELIMITER ;

CALL Bottom5GrossingSongs();

# Stored procedure for top 3 streamed music categories
DELIMITER //

DROP PROCEDURE IF EXISTS MostStreamedMusicCategory;
CREATE PROCEDURE MostStreamedMusicCategory ()
BEGIN
DROP TABLE IF EXISTS TopMusicCategory;
CREATE TEMPORARY TABLE IF NOT EXISTS TopMusicCategory (
Category varchar(250), Total_Streams bigint
);
INSERT INTO TopMusicCategory (Category, Total_Streams)
SELECT Category, SUM(Stream_Count) AS Total_Streams
FROM StreamsandRevenue
GROUP BY Category
ORDER BY Total_Streams DESC
LIMIT 3; 

SELECT * FROM TopMusicCategory;

END //

DELIMITER ;

CALL MostStreamedMusicCategory();

# I'll use a case when clause to classify our demographics 
SELECT Platform, Demographic, Sum(Revenue) AS Total_Revenue, 
CASE
	WHEN Demographic = '18-24' Then 'Young Adult'
    WHEN Demographic = '25-34' THEN 'Maturing Adult'
    WHEN Demographic = '35-44' THEN 'Middle Aged Adult'
    ELSE 'OLDER ADULT'
END AS Adult_Classification
FROM StreamsandRevenue
GROUP BY Platform, Demographic;

# Max & Min streams per song
SELECT Song_Title, Category, MAX(Stream_Count) AS Max_Streams, MIN(Stream_Count) AS Min_Streams, AVG(Revenue_Per_Stream) as Avg_RevenuePerStream, MAX(Revenue) AS Max_Revenue, MIN(Revenue) as Min_Revenue
FROM StreamsandRevenue
GROUP BY Song_Title, Category;

# Max & Min streams per category 
SELECT Category, MAX(Stream_Count) AS Max_Streams, MIN(Stream_Count) AS Min_Streams
FROM StreamsandRevenue
GROUP BY Category; 

# Max & Min streams per category per platform
SELECT Platform, Category, MAX(Stream_Count) AS Max_Streams, MIN(Stream_Count) AS Min_Streams
FROM StreamsandRevenue
GROUP BY Platform, Category; 






















